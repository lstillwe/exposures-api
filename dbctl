#!/usr/bin/env bash

BACKEND_ID=backend
PGADMIN_ID=pgadmin

_usage() {
    echo "--- Backend PostgreSQL Usage ---"
    echo "usage: $0 help                        # Display this usage message"
    echo "usage: $0 start                       # Starts backend database container"
    echo "usage: $0 stop                        # Stops backend database container"
    echo "usage: $0 restart                     # restarts backend database container"
    echo "usage: $0 build                       # issues docker-compose build call"
    echo "usage: $0 psql                        # Connects to backend database as postgres user"
    echo "usage: $0 psql USER PASS DATABASE     # Connects to backend DATABASE as USER:PASS"
    echo "usage: $0 purge                       # Remove backend database and container"
    echo "usage: $0 pgadmin start               # Start the pgadmin container"
    echo "usage: $0 pgadmin stop                # Stop the pgadmin container"
}

_start() {
    if [[ "$(docker ps -a | grep backend)" ]]; then
        if [[ $(docker inspect -f {{.State.Running}} ${BACKEND_ID}) != 'true' ]]; then
            docker-compose start ${BACKEND_ID}
        else
            echo "${BACKEND_ID} is already running..."
        fi
    else
        if [[ -z "$(docker images | grep datatranslator_backend)" ]]; then
            docker-compose build ${BACKEND_ID}
        fi
        docker-compose up -d ${BACKEND_ID}
    fi
}

_stop() {
    if [[ $(docker inspect -f {{.State.Running}} ${BACKEND_ID}) = 'true' ]]; then
        docker-compose stop ${BACKEND_ID}
    else
        echo "${BACKEND_ID} is not running..."
    fi
}

_restart() {
    _stop
    _start
}

_build() {
    _stop
    docker-compose build
}

_psql() {
    if [[ $# -eq 1 ]]; then
        # connect to database as postgres user
        docker exec -ti -u postgres ${BACKEND_ID} psql
    elif [[ $# -eq 4 ]]; then
        # hostname:port:database:username:password
        docker exec ${BACKEND_ID} /usr/bin/env bash -c 'install -m 0600 /dev/null /root/.pgpass'
        docker exec ${BACKEND_ID} /usr/bin/env bash -c 'echo "localhost:5432:'${4}':'${2}':'${3}'" >> /root/.pgpass'
        docker exec -ti ${BACKEND_ID} psql -h localhost -U ${2} ${4}
    else
        echo "Invalid request..."
        echo "usage: $0 psql                        # Connects to backend database as postgres user"
        echo "usage: $0 psql USER PASS DATABASE     # Connects to backend DATABASE as USER:PASS"
    fi
}

_purge() {
    _stop
    docker-compose rm -f ${BACKEND_ID}
}

_pgadmin() {
    if [[ $# -ne 2 ]]; then
        echo "Invalid request..."
        echo "usage: $0 pgadmin start               # Start the pgadmin container"
        echo "usage: $0 pgadmin stop                # Stop the pgadmin container"
    else
        if [ "${2,,}" = 'start' ]; then
            if [[ -z "$(docker images | grep datatranslator_pgadmin)" ]]; then
                docker-compose build ${PGADMIN_ID}
            fi
            docker-compose up -d ${PGADMIN_ID}
        elif [ "${2,,}" = 'stop' ]; then
            docker-compose stop ${PGADMIN_ID}
        else
            echo "Invalid request..."
            echo "usage: $0 pgadmin start               # Start the pgadmin container"
            echo "usage: $0 pgadmin stop                # Stop the pgadmin container"
        fi
    fi
}

case "$1" in
    help) _usage
        ;;
    start) _start
        ;;
    stop) _stop
        ;;
    restart) _restart
        ;;
    build) _build
        ;;
    psql) _psql "$@"
        ;;
    purge) _purge
        ;;
    pgadmin) _pgadmin "$@"
        ;;
    *) _usage
        ;;
esac

exit 0;
